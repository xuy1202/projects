#coding: utf-8

try:
    import cPickle as Pickle
except:
    import Pickle
import zlib
from bson import binary
from functools import partial


def CompressObject(obj):
    try:
        return zlib.compress(Pickle.dumps(obj))
    except:
        return None


def DecompressObject(bd):
    try:
        return Pickle.loads(zlib.decompress(bd))
    except:
        return None


def CompressObject2Binary(obj):
    try:
        return binary.Binary(CompressObject(obj))
    except:
        return None


def DecompressBinary2Object(bd):
    try:
        return DecompressObject(bd)
    except:
        return None


def CompressObject2BinaryIf(obj, func=lambda o: True):
    #print len(str(obj)), repr(obj)
    if func(obj):
        ret = CompressObject2Binary(obj)
        #print len(str(ret)), repr(ret)
        return ret
    return obj


CompressObject2BinaryIfSaving = partial(CompressObject2BinaryIf, func=lambda o: len(str(o)) > 150)



if __name__ == "__main__":
    sl = ['124.202.190.* = 1023', '058.030.052.038 = 925', '058.030.052.* = 925', '124.202.190.002 = 859', '119.057.170.* = 467', '119.057.170.027 = 467', '124.202.191.* = 364', '124.202.191.224 = 364', '124.205.254.004 = 178', '124.205.254.* = 178', '124.202.190.249 = 164', '001.202.029.* = 85', '001.202.029.249 = 85', '*:3081 = 85', '001.202.029.249:3081 = 85', '*:36284 = 73', '001.202.124.173 = 72', '001.202.124.* = 72', '001.202.124.173:36284 = 72', '*:10027 = 2', '*:32289 = 2', '*:23219 = 2', '*:28337 = 2', '*:43877 = 2', '*:10403 = 2', '*:6126 = 2', '*:2315 = 2', '*:27053 = 2', '*:39564 = 2', '*:9936 = 2', '*:56328 = 2', '*:53972 = 2', '*:47070 = 2', '*:41126 = 2', '*:19141 = 2', '*:31865 = 2', '*:4004 = 2', '*:6899 = 2', '*:6543 = 2', '*:44948 = 2', '*:6972 = 2', '*:4021 = 2', '*:5819 = 2', '*:10358 = 2', '*:3257 = 2', '*:7806 = 2', '*:52690 = 2', '*:1772 = 2', '*:13818 = 2', '*:13728 = 2', '058.030.052.038:36351 = 2', '*:26322 = 2', '*:8604 = 2', '*:9790 = 2', '058.030.052.038:44948 = 2', '*:49452 = 2', '*:7808 = 2', '*:2698 = 2', '*:47098 = 2', '*:3571 = 2', '058.030.052.038:17036 = 2', '*:10035 = 2', '*:35579 = 2', '*:6153 = 2', '*:32294 = 2', '*:8635 = 2', '*:10599 = 2', '*:16565 = 2', '*:36159 = 2', '*:4466 = 2', '*:4402 = 2', '*:53278 = 2', '*:48677 = 2', '*:9946 = 2', '*:2328 = 2', '*:17459 = 2', '*:3826 = 2', '058.030.052.038:56328 = 2', '*:2340 = 2', '*:6885 = 2', '*:45168 = 2', '*:24859 = 2', '058.030.052.038:53972 = 2', '*:17439 = 2', '*:40425 = 2', '*:13860 = 2', '119.057.170.027:27053 = 2', '*:37159 = 2', '*:17036 = 2', '*:34482 = 2', '*:3528 = 2', '*:36351 = 2', '*:40950 = 2', '*:3545 = 2', '*:9886 = 2', '*:11613 = 2', '058.030.052.038:52690 = 2', '*:2574 = 2', '058.030.052.038:40425 = 2', '119.057.170.027:48677 = 2']
    sl = [  "*:8090=123",   "111.227.162.*=3",  "111.226.184.*=3",  "124.236.096.*=2",  "123.180.096.*=2",  "111.227.201.*=2"]
    sl = []
    sl = [  "*:8090=123",   "111.227.162.*=3",  "111.226.184.*=3",  "124.236.096.*=2",  "123.180.096.*=2",  "111.227.201.*=2",  "111.227.194.*=2",  "111.227.193.*=2",  "111.224.160.*=2",  "027.184.214.*=2",  "124.239.113.052:8090=1",   "124.239.105.216:8090=1",   "124.239.050.052:8090=1",   "124.238.200.232:8090=1",   "124.238.155.221:8090=1",   "124.237.185.207:8090=1",   "124.237.162.004:8090=1",   "124.237.110.123:8090=1",   "124.237.107.234:8090=1",   "124.237.103.016:8090=1",   "124.237.100.105:8090=1",   "124.237.087.077:8090=1",   "124.237.075.085:8090=1",   "124.236.204.135:8090=1",   "124.236.202.083:8090=1",   "124.236.199.231:8090=1",   "124.236.197.053:8090=1",   "124.236.194.055:8090=1",   "124.236.102.135:8090=1",   "124.236.100.150:8090=1",   "124.236.097.110:8090=1",     "124.236.096.223:8090=1",     "124.236.096.026:8090=1",   "124.236.092.055:8090=1",   "123.183.152.135:8090=1",   "123.183.150.067:8090=1",   "123.183.148.060:8090=1",   "123.183.048.113:8090=1",   "123.181.244.000:8090=1",   "123.181.239.060:8090=1",   "123.181.157.100:8090=1",   "123.181.062.023:8090=1",   "123.180.224.122:8090=1",   "123.180.099.175:8090=1",   "123.180.096.194:8090=1",   "123.180.096.159:8090=1",   "123.180.078.088:8090=1",   "123.180.077.180:8090=1",   "123.180.073.115:8090=1",   "123.180.072.214:8090=1" ]
    print sl, len(str(sl))
    dd = CompressObject2BinaryIfSaving(sl)
    print repr(dd), len(str(dd))
    ds = DecompressBinary2Object(dd)
    print ds, len(str(ds))


